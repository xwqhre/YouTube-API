package com.example.myyoutubechik.ui.playerimport android.annotation.SuppressLintimport android.content.Contextimport android.net.ConnectivityManagerimport android.net.NetworkCapabilitiesimport androidx.core.view.WindowCompatimport androidx.core.view.WindowInsetsCompatimport androidx.core.view.WindowInsetsControllerCompatimport androidx.core.view.isVisibleimport com.example.myyoutubechik.Rimport com.example.myyoutubechik.core.ui.BaseActivityimport com.example.myyoutubechik.databinding.ActivityPlayerBindingimport com.example.myyoutubechik.ui.MainViewModelimport com.google.android.exoplayer2.ExoPlayerimport com.google.android.exoplayer2.MediaItemimport com.google.android.exoplayer2.util.Utilimport org.koin.androidx.viewmodel.ext.android.viewModelclass PlayerActivity :  BaseActivity<ActivityPlayerBinding, MainViewModel>() {    private var player: ExoPlayer? = null    private var playWhenReady = true    private var currentItem = 0    private var playbackPosition = 0L    private fun initializePlayer() {        player = ExoPlayer.Builder(this)            .build()            .also { exoPlayer ->                binding.videoView.player = exoPlayer                val mediaItem = MediaItem.fromUri(getString(R.string.media_url_mp4))                exoPlayer.setMediaItem(mediaItem)                exoPlayer.prepare()                exoPlayer.playWhenReady = playWhenReady                exoPlayer.seekTo(currentItem, playbackPosition)                exoPlayer.prepare()            }    }    override fun inflateViewBinding(): ActivityPlayerBinding {        return ActivityPlayerBinding.inflate(layoutInflater)    }    override val viewModel:  MainViewModel by viewModel()    override fun isInternetAvailable(): Boolean {        val connectivityManager = getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager?        val network = connectivityManager?.activeNetwork ?: return false        val capabilities = connectivityManager.getNetworkCapabilities(network) ?: return false        return capabilities.hasCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET)    }    override fun isConnection() {        super.isConnection()        if (!isInternetAvailable()) {            binding.checkInternet.failInternet.isVisible = true        }    }    override fun initViewModel() {        super.initViewModel()        val getId = intent.getStringExtra("id")        val getTitle = intent.getStringExtra("title")        val getDesc = intent.getStringExtra("desc")        viewModel.getVideo(getId!!).observe(this) {            binding.tvTitle.text = getTitle            binding.tvDesc.text = getDesc        }    }    public override fun onStart() {        super.onStart()        if (Util.SDK_INT > 23) {            initializePlayer()        }    }    public override fun onResume() {        super.onResume()        hideSystemUi()        if ((Util.SDK_INT <= 23 || player == null)) {            initializePlayer()        }    }    @SuppressLint("InlinedApi")    private fun hideSystemUi() {        WindowCompat.setDecorFitsSystemWindows(window, false)        WindowInsetsControllerCompat(window, binding.videoView).let { controller ->            controller.hide(WindowInsetsCompat.Type.systemBars())            controller.systemBarsBehavior = WindowInsetsControllerCompat.BEHAVIOR_SHOW_TRANSIENT_BARS_BY_SWIPE        }    }    public override fun onPause() {        super.onPause()        if (Util.SDK_INT <= 23) {            releasePlayer()        }    }    public override fun onStop() {        super.onStop()        if (Util.SDK_INT > 23) {            releasePlayer()        }    }    override fun initListener() {        super.initListener()        binding.imgBack.setOnClickListener { finish() }        binding.tvBack.setOnClickListener { finish() }    }    private fun releasePlayer() {        player?.let { exoPlayer ->            playbackPosition = exoPlayer.currentPosition            currentItem = exoPlayer.currentMediaItemIndex            playWhenReady = exoPlayer.playWhenReady            exoPlayer.release()        }        player = null    }}