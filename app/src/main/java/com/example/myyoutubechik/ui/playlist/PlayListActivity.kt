package com.example.myyoutubechik.ui.playlistimport android.content.Contextimport android.content.Intentimport android.net.ConnectivityManagerimport android.net.NetworkCapabilitiesimport androidx.core.view.isVisibleimport androidx.recyclerview.widget.LinearLayoutManagerimport com.example.myyoutubechik.core.network.result.Resourceimport com.example.myyoutubechik.core.ui.BaseActivityimport com.example.myyoutubechik.data.remote.model.PlaylistItemimport com.example.myyoutubechik.databinding.ActivityPlaylistBindingimport com.example.myyoutubechik.ui.MainViewModelimport com.example.myyoutubechik.ui.detail.DetailActivityimport org.koin.androidx.viewmodel.ext.android.viewModelclass PlayListActivity : BaseActivity<ActivityPlaylistBinding, MainViewModel>() {    private lateinit var adapter: PlayListAdapter    override val viewModel:  MainViewModel by viewModel()    override fun isInternetAvailable(): Boolean {        val connectivityManager = getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager?        val network = connectivityManager?.activeNetwork ?: return false        val capabilities = connectivityManager.getNetworkCapabilities(network) ?: return false        return capabilities.hasCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET)    }    override fun initViews() {        super.initViews()        adapter = PlayListAdapter(this::onClick)        binding.recyclerView.layoutManager = LinearLayoutManager(this)        binding.recyclerView.adapter = adapter    }    override fun initViewModel() {        super.initViewModel()        viewModel.loading.observe(this) {            binding.progressBar.isVisible = it        }        viewModel.getPlaylists().observe(this) {            when (it.status) {                Resource.Status.SUCCESS -> {                    it.data?.let { it1 -> adapter.addList(it1.items ) }                    viewModel.loading.postValue(false)                }                Resource.Status.LOADING -> {                    viewModel.loading.postValue(true)                }                Resource.Status.ERROR -> {                    viewModel.loading.postValue(false)                }            }        }    }    override fun isConnection() {        super.isConnection()        if(!isInternetAvailable()) {            binding.checkInternet.failInternet.isVisible = true        }    }    override fun inflateViewBinding(): ActivityPlaylistBinding {        return ActivityPlaylistBinding.inflate(layoutInflater)    }    private fun onClick(item: PlaylistItem.Item) {        val intent = Intent(this, DetailActivity::class.java)        intent.putExtra("id", item.id)        intent.putExtra("title", item.snippet?.title)        intent.putExtra("desc", item.snippet?.description)        intent.putExtra("count", item.contentDetails?.itemCount )        startActivity(intent)    }}